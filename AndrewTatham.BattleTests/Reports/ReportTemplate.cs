// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Text;

namespace AndrewTatham.BattleTests.Reports
{
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class ReportTemplate : ReportTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            Write(@"<!DOCTYPE html >
<html>
  <head>
    <title>Scores</title>

	<script type=""text/javascript"" src=""https://www.google.com/jsapi""></script>
	<script type=""text/javascript"">

		google.load('visualization', '1', {packages:['corechart', 'table']});
		google.setOnLoadCallback(drawTables);
	
		function drawTables() 
		{

			var WeeklyTotalChartOptions = {
			  isStacked: true
			};
			var WeeklyTotalChartData = new google.visualization.arrayToDataTable(");
            
            #line 26 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.WeeklyTotalChart));
            
            #line default
            #line hidden
            Write(@");
			var WeeklyTotalChart = new google.visualization.SteppedAreaChart(document.getElementById('WeeklyTotalChart'));
			WeeklyTotalChart.draw(WeeklyTotalChartData, WeeklyTotalChartOptions);

			var DailyTotalChartOptions = {
			  isStacked: true
			};
			var DailyTotalChartData = new google.visualization.arrayToDataTable(");
            
            #line 33 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.DailyTotalChart));
            
            #line default
            #line hidden
            Write(@");
			var DailyTotalChart = new google.visualization.SteppedAreaChart(document.getElementById('DailyTotalChart'));
			DailyTotalChart.draw(DailyTotalChartData, DailyTotalChartOptions);

		
			var WeeklyWinRatioChartOptions = {
				hAxis: { minValue: 0.0, maxValue: 1.0 }
			};
			var WeeklyWinRatioChartData = new google.visualization.arrayToDataTable(");
            
            #line 41 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.WeeklyWinRatioChart));
            
            #line default
            #line hidden
            Write(@");
			var WeeklyWinRatioChart = new google.visualization.LineChart(document.getElementById('WeeklyWinRatioChart'));
			WeeklyWinRatioChart.draw(WeeklyWinRatioChartData, WeeklyWinRatioChartOptions);

			var DailyWinRatioChartOptions = {
				hAxis: { minValue: 0.0, maxValue: 1.0 }
			};
			var DailyWinRatioChartData = new google.visualization.arrayToDataTable(");
            
            #line 48 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.DailyWinRatioChart));
            
            #line default
            #line hidden
            Write(@");
			var DailyWinRatioChart = new google.visualization.LineChart(document.getElementById('DailyWinRatioChart'));
			DailyWinRatioChart.draw(DailyWinRatioChartData, DailyWinRatioChartOptions);

			
			var WeeklyOneVsOneClassificationChartOptions = {
			  title: 'OneVsOne',
			  isStacked: true
			};
			var WeeklyOneVsOneClassificationChartData = new google.visualization.arrayToDataTable(");
            
            #line 57 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.WeeklyOneVsOneClassificationChart));
            
            #line default
            #line hidden
            Write(@");
			var WeeklyOneVsOneClassificationChart = new google.visualization.SteppedAreaChart(document.getElementById('WeeklyOneVsOneClassificationChart'));
			WeeklyOneVsOneClassificationChart.draw(WeeklyOneVsOneClassificationChartData, WeeklyOneVsOneClassificationChartOptions);

			var WeeklyMeleeClassificationChartOptions = {
			  title: 'Melee',
			  isStacked: true
			};
			var WeeklyMeleeClassificationChartData = new google.visualization.arrayToDataTable(");
            
            #line 65 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.WeeklyMeleeClassificationChart));
            
            #line default
            #line hidden
            Write(@");
			var WeeklyMeleeClassificationChart = new google.visualization.SteppedAreaChart(document.getElementById('WeeklyMeleeClassificationChart'));
			WeeklyMeleeClassificationChart.draw(WeeklyMeleeClassificationChartData, WeeklyMeleeClassificationChartOptions);

			var DailyOneVsOneClassificationChartOptions = {
			  title: 'OneVsOne',
			  isStacked: true
			};
			var DailyOneVsOneClassificationChartData = new google.visualization.arrayToDataTable(");
            
            #line 73 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.DailyOneVsOneClassificationChart));
            
            #line default
            #line hidden
            Write(@");
			var DailyOneVsOneClassificationChart = new google.visualization.SteppedAreaChart(document.getElementById('DailyOneVsOneClassificationChart'));
			DailyOneVsOneClassificationChart.draw(DailyOneVsOneClassificationChartData, DailyOneVsOneClassificationChartOptions);

			var DailyMeleeClassificationChartOptions = {
			  title: 'Melee',
			  isStacked: true
			};
			var DailyMeleeClassificationChartData = new google.visualization.arrayToDataTable(");
            
            #line 81 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.DailyMeleeClassificationChart));
            
            #line default
            #line hidden
            Write(@");
			var DailyMeleeClassificationChart = new google.visualization.SteppedAreaChart(document.getElementById('DailyMeleeClassificationChart'));
			DailyMeleeClassificationChart.draw(DailyMeleeClassificationChartData, DailyMeleeClassificationChartOptions);


			var tableData = new google.visualization.arrayToDataTable(");
            
            #line 86 "C:\Users\Andrew.Tatham\Documents\Visual Studio 2012\Projects\Robocode\AndrewTatham.BattleTests\Reports\ReportTemplate.tt"
            Write(ToStringHelper.ToStringWithCulture(_scores.TableData));
            
            #line default
            #line hidden
            Write(@");
		    var table = new google.visualization.Table(document.getElementById('table_div'));
			table.draw(tableData, {showRowNumber: true});


		};


    </script>
  </head>

  <body>
	  <table>
		<tr>
			<td><div id='WeeklyTotalChart'></div></td>
			<td><div id='DailyTotalChart'></div></td>
		</tr>
		<tr>
			<td><div id='WeeklyWinRatioChart'></div></td>
			<td><div id='DailyWinRatioChart'></div></td>
		</tr>
		<tr>
			<td><div id='WeeklyOneVsOneClassificationChart'></div></td>
			<td><div id='DailyOneVsOneClassificationChart'></div></td>
		</tr>
		<tr>
			<td><div id='WeeklyMeleeClassificationChart'></div></td>
			<td><div id='DailyMeleeClassificationChart'></div></td>
		</tr>
		<tr>
			<td colspan='2'><div id='table_div'></div></td>
		
		</tr>
	  </table>    
  </body>
</html>");
            return GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class ReportTemplateBase
    {
        #region Fields
        private StringBuilder _generationEnvironmentField;
        private CompilerErrorCollection _errorsField;
        private List<int> _indentLengthsField;
        private string _currentIndentField = "";
        private bool _endsWithNewline;
        private IDictionary<string, object> _sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected StringBuilder GenerationEnvironment
        {
            get
            {
                if (_generationEnvironmentField == null)
                {
                    _generationEnvironmentField = new StringBuilder();
                }
                return _generationEnvironmentField;
            }
            set
            {
                _generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public CompilerErrorCollection Errors
        {
            get
            {
                if (_errorsField == null)
                {
                    _errorsField = new CompilerErrorCollection();
                }
                return _errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private List<int> IndentLengths
        {
            get
            {
                if (_indentLengthsField == null)
                {
                    _indentLengthsField = new List<int>();
                }
                return _indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return _currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual IDictionary<string, object> Session
        {
            get
            {
                return _sessionField;
            }
            set
            {
                _sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if ((GenerationEnvironment.Length == 0) 
                || _endsWithNewline)
            {
                GenerationEnvironment.Append(_currentIndentField);
                _endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(Environment.NewLine, StringComparison.CurrentCulture))
            {
                _endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if (_currentIndentField.Length == 0)
            {
                GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Environment.NewLine, Environment.NewLine + _currentIndentField);
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (_endsWithNewline)
            {
                GenerationEnvironment.Append(textToAppend, 0, textToAppend.Length - _currentIndentField.Length);
            }
            else
            {
                GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            Write(textToAppend);
            GenerationEnvironment.AppendLine();
            _endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            Write(string.Format(CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            CompilerError error = new CompilerError();
            error.ErrorText = message;
            Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            CompilerError error = new CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if (indent == null)
            {
                throw new ArgumentNullException("indent");
            }
            _currentIndentField = _currentIndentField + indent;
            IndentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if (IndentLengths.Count > 0)
            {
                int indentLength = IndentLengths[IndentLengths.Count - 1];
                IndentLengths.RemoveAt(IndentLengths.Count - 1);
                if (indentLength > 0)
                {
                    returnValue = _currentIndentField.Substring(_currentIndentField.Length - indentLength);
                    _currentIndentField = _currentIndentField.Remove(_currentIndentField.Length - indentLength);
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            IndentLengths.Clear();
            _currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private IFormatProvider _formatProviderField  = CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public IFormatProvider FormatProvider
            {
                get
                {
                    return _formatProviderField ;
                }
                set
                {
                    if (value != null)
                    {
                        _formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if (objectToConvert == null)
                {
                    throw new ArgumentNullException("objectToConvert");
                }
                Type t = objectToConvert.GetType();
                MethodInfo method = t.GetMethod("ToString", new[] {
                            typeof(IFormatProvider)});
                if (method == null)
                {
                    return objectToConvert.ToString();
                }
                return (string)method.Invoke(objectToConvert, new object[] {
                    _formatProviderField });
            }
        }
        private readonly ToStringInstanceHelper _toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return _toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
