// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18047
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace AndrewTatham.BehaviorTests.BrainFeatures
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BrainGunLogic")]
    public partial class BrainGunLogicFeature
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "BrainGunLogic.feature"
#line hidden

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BrainGunLogic", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The gun does not fire at the aim result until the gun has aimed")]
        public virtual void TheGunDoesNotFireAtTheAimResultUntilTheGunHasAimed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The gun does not fire at the aim result until the gun has aimed", ((string[])(null)));
#line 6
            this.ScenarioSetup(scenarioInfo);
#line 7
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
            testRunner.And("the gun is cool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
            testRunner.And("an aim result is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
            testRunner.And("the gun is NOT aimed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
            testRunner.When("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
            testRunner.Then("the gun is aimed at the target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
            testRunner.And("the gun is NOT fired at the target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The gun does not fire at the aim result until it has cooled down")]
        public virtual void TheGunDoesNotFireAtTheAimResultUntilItHasCooledDown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The gun does not fire at the aim result until it has cooled down", ((string[])(null)));
#line 16
            this.ScenarioSetup(scenarioInfo);
#line 17
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
            testRunner.And("an aim result is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
            testRunner.And("the gun is aimed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
            testRunner.And("the gun is NOT cool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
            testRunner.When("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
            testRunner.Then("the gun is NOT fired at the target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The gun fires at the aim result when the gun is aimed and cool")]
        public virtual void TheGunFiresAtTheAimResultWhenTheGunIsAimedAndCool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The gun fires at the aim result when the gun is aimed and cool", ((string[])(null)));
#line 25
            this.ScenarioSetup(scenarioInfo);
#line 26
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
            testRunner.And("an aim result is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
            testRunner.And("the gun is aimed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
            testRunner.And("the gun is cool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
            testRunner.When("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
            testRunner.Then("the gun is fired at the target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion Designer generated code