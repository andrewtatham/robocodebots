// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18047
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace AndrewTatham.BehaviorTests.BrainFeatures
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("The brain executes the correct behavior")]
    public partial class TheBrainExecutesTheCorrectBehaviorFeature
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "Brain.feature"
#line hidden

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "The brain executes the correct behavior", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Initialisation")]
        public virtual void Initialisation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initialisation", ((string[])(null)));
#line 3
            this.ScenarioSetup(scenarioInfo);
#line 4
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
            testRunner.When("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
            testRunner.Then("The robots colours should be set to Magenta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 7
            testRunner.And("The robots radar and turret should move independantly of its body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
            testRunner.And("a new context is initialised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The selected behaviour is the first to return true for the condition")]
        public virtual void TheSelectedBehaviourIsTheFirstToReturnTrueForTheCondition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The selected behaviour is the first to return true for the condition", ((string[])(null)));
#line 11
            this.ScenarioSetup(scenarioInfo);
#line 12
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
            testRunner.When("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
            testRunner.Then("The behaviour whose condition is true is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("On Skipped Turn")]
        public virtual void OnSkippedTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("On Skipped Turn", ((string[])(null)));
#line 20
            this.ScenarioSetup(scenarioInfo);
#line 21
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
            testRunner.When("OnSkippedTurn is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
            testRunner.Then("\"***OnSkippedTurn***\" is logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("On Scanned Robot")]
        public virtual void OnScannedRobot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("On Scanned Robot", ((string[])(null)));
#line 26
            this.ScenarioSetup(scenarioInfo);
#line 27
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
            testRunner.And("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
            testRunner.When("OnScannedRobot is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
            testRunner.Then("the enemies collection is updated with the new robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("On Bullet Hit Bullet")]
        public virtual void OnBulletHitBullet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("On Bullet Hit Bullet", ((string[])(null)));
#line 33
            this.ScenarioSetup(scenarioInfo);
#line 34
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
            testRunner.And("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
            testRunner.When("OnBulletHitBullet is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("On Hit By Bullet")]
        public virtual void OnHitByBullet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("On Hit By Bullet", ((string[])(null)));
#line 40
            this.ScenarioSetup(scenarioInfo);
#line 41
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
            testRunner.And("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
            testRunner.When("OnHitByBullet is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("On Robot Death")]
        public virtual void OnRobotDeath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("On Robot Death", ((string[])(null)));
#line 47
            this.ScenarioSetup(scenarioInfo);
#line 48
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
            testRunner.And("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
            testRunner.When("OnRobotDeath is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
            testRunner.Then("the enemies collection is updated with the deceased robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Render")]
        public virtual void Render()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Render", ((string[])(null)));
#line 55
            this.ScenarioSetup(scenarioInfo);
#line 56
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
            testRunner.And("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
            testRunner.When("Render is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
            testRunner.Then("Render is called on the current behavior", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
            testRunner.And("Render is called on the context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion Designer generated code