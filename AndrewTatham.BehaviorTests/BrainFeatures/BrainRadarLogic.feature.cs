// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18047
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace AndrewTatham.BehaviorTests.BrainFeatures
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BrainRadarLogic")]
    public partial class BrainRadarLogicFeature
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "BrainRadarLogic.feature"
#line hidden

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BrainRadarLogic", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Radar defaults to full scan")]
        public virtual void RadarDefaultsToFullScan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Radar defaults to full scan", ((string[])(null)));
#line 4
            this.ScenarioSetup(scenarioInfo);
#line 5
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
            testRunner.And("the radar result is NOT set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
            testRunner.When("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
            testRunner.Then("the radar performs a full scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Radar full scan")]
        public virtual void RadarFullScan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Radar full scan", ((string[])(null)));
#line 12
            this.ScenarioSetup(scenarioInfo);
#line 13
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
            testRunner.And("the radar result is set to full scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
            testRunner.When("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
            testRunner.Then("the radar performs a full scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Radar target scan")]
        public virtual void RadarTargetScan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Radar target scan", ((string[])(null)));
#line 19
            this.ScenarioSetup(scenarioInfo);
#line 20
            testRunner.Given("A new Brain is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
            testRunner.And("RunInit is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
            testRunner.And("a target is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
            testRunner.And("the radar result is set to scan target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
            testRunner.When("Run is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
            testRunner.Then("the radar performs a target scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion Designer generated code